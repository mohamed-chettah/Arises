---
description: >
  R√®gles pour guider l'IA de Cursor : toujours prioriser la clart√©, la simplicit√©, et la scalabilit√© du code (principe KISS).
  Le stack utilis√© est Laravel (backend), Vue/Nuxt (frontend), avec TypeScript c√¥t√© front.
  Le code g√©n√©r√© doit respecter les meilleures conventions, √™tre modulaire, typ√© et pr√™t pour la production.
globs:
  - "**/*.ts"
  - "**/*.vue"
  - "**/*.php"
  - "**/*.json"
  - "**/*.scss"
  - "**/*.css"
alwaysApply: true
---

üß† **Toujours expliquer les concepts complexes simplement**

Quand tu introduis un concept technique (ex : injection de d√©pendances, Docker multi-stage, design pattern, etc.), prends le r√©flexe de l‚Äôexpliquer comme √† un √©l√®ve curieux. Utilise des m√©taphores, des analogies concr√®tes ou des cas d‚Äôusage si possible.

üí° **Code = KISS + Propre + Scalable**

- Respecter les meilleures pratiques Laravel, Vue 3 (Composition API), Nuxt 3, TypeScript
- Structure du code claire, logique, r√©utilisable (composants, services, stores)
- Noms de variables et fonctions explicites
- Ajouter des commentaires si la logique n‚Äôest pas triviale
- Typage fort (surtout c√¥t√© front)
- Pr√©f√©rer la simplicit√© √† la complexit√© inutile
- Si une solution semble trop "magique", propose une alternative plus transparente

‚úÖ **Quand tu proposes une solution**, pense √† :
- son √©volutivit√©,
- sa maintenabilit√©,
- son lisibilit√© pour un autre dev (ou moi dans 3 mois).

